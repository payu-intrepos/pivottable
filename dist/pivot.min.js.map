{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","sorter","sorters","max","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","Math","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","match","shift","order","l_mapping","mapping","toLowerCase","sort","isFunction","input","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","flatColKey","flatRowKey","len2","n","fromCharCode","agg","pivotUtilities","pivotData","c","getClickHandler","r","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","pivot","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","attrValues","existingOpts","initialRender","len3","materializedInput","o","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","startsWith","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","prepend","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","q","s","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                @val = x if @sorter(x, @val ? x) <= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as)\n        b = String(bs)\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = opts.sorted ? false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend true, defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, rowKey, [])\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, [], colKey)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        if getClickHandler?\n            td.onclick = getClickHandler(val, [], [])\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownAttributes\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    $(\"<button>\", {type: \"button\"}).text(\"Apply\")\n                        .appendTo(finalButtons).bind \"click\", ->\n                            if valueList.find(\".changed\").removeClass(\"changed\").length\n                                refresh()\n                            closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(\"Cancel\")\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) <= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) >= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.derivedAttributes = (ref6 = opts.derivedAttributes) != null ? ref6 : {};\n        this.filter = (ref7 = opts.filter) != null ? ref7 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = (ref8 = opts.sorted) != null ? ref8 : false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, getClickHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, rowKey, []);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, [], colKey);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      if (getClickHandler != null) {\n        td.onclick = getClickHandler(val, [], []);\n      }\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, defaults, e, existingOpts, fn, i, initialRender, l, len1, len2, len3, materializedInput, n, o, opts, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(\"Apply\").appendTo(finalButtons).bind(\"click\", function() {\n            if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n              refresh();\n            }\n            return closeFilterBox();\n          });\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(\"Cancel\").appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, q, ref4, ref5, s, subopts, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = q = 0, ref5 = numInputsToProcess; 0 <= ref5 ? q < ref5 : q > ref5; x = 0 <= ref5 ? ++q : --q) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (s = 0, len4 = shownAttributes.length; s < len4; s++) {\n                  attr = shownAttributes[s];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}